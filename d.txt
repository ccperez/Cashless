diff --git a/database/database_helper.dart b/database/database_helper.dart
index 166463a..3a6c48d 100644
--- a/database/database_helper.dart
+++ b/database/database_helper.dart
@@ -31,7 +31,8 @@ class DatabaseHelper {
 	Future<Database> initializeDatabase() async {
 		// Get the directory path for both Android and iOS to store database.
 		Directory directory = await getApplicationDocumentsDirectory();
-		String path = directory.path + 'cashless.db';
+		String path = directory.path + 'cashless_v1.db';
+		print(directory.path);
 		// Open/create the database at a given path
 		var dbCashless = await openDatabase(path, version: 1, onCreate: _createDb);
 		return dbCashless;
@@ -47,7 +48,8 @@ class DatabaseHelper {
 			'  studentId	TEXT,'
 			'  password 	TEXT,'
 			'  pin 				TEXT,'
-			'  date 			TEXT'
+			'  date 			TEXT,'
+			'  confirm   INTEGER'
 			')'
 		);
 	}
diff --git a/main.dart b/main.dart
index 6536a56..e60fa02 100644
--- a/main.dart
+++ b/main.dart
@@ -17,7 +17,7 @@ class MyApp extends StatelessWidget {
 			title: "Cashless",
 			routes: {
 				'/login':          (BuildContext context) => LoginPage(),
-				'/register':       (BuildContext context) => Register(User('', '', '', '', '', '', '')),
+				'/register':       (BuildContext context) => Register(User('', '', '', '', '', '', '', 0)),
 				'/forgetpassword': (BuildContext context) => ForgetPassword(),
 				'/dashboard':      (BuildContext context) => NavBar()
 			},
diff --git a/models/user.dart b/models/user.dart
index 6b8c6c3..863c14c 100644
--- a/models/user.dart
+++ b/models/user.dart
@@ -1,11 +1,11 @@
 class User {
 
-  int id;
+  int id, confirm;
   String name, email, phone, studentId, password, pin, date;
 
-  User(this.name, this.email, this.phone, this.studentId, this.password, this.pin, this.date);
+  User(this.name, this.email, this.phone, this.studentId, this.password, this.pin, this.date, this.confirm);
 
-  User.withId(this.id, this.name, this.email, this.phone, this.studentId, this.password, this.pin, this.date);
+  User.withId(this.id, this.name, this.email, this.phone, this.studentId, this.password, this.pin, this.date, this.confirm);
 
   User.fromJson(Map json)
     : id        = json['id'],
@@ -15,7 +15,8 @@ class User {
       studentId = json['studentId'],
       password  = json['password'],
 			pin       = json['pin'],
-      date      = json['date'];
+      date      = json['date'],
+			confirm   = json['confirm'];
 
   Map<String, dynamic> toMap() {
 		var map = Map<String, dynamic>();
@@ -27,7 +28,7 @@ class User {
     map['password']  = password;
 		map['pin']       = pin;
     map['date']      = date;
-
+		map['confirm']   = confirm;
 		return map;
 	}
 
@@ -39,5 +40,6 @@ class User {
       studentId = map['studentId'],
       password  = map['password'],
 			pin       = map['pin'],
-      date      = map['date'];
+      date      = map['date'],
+			confirm   = map['confirm'];
 }
diff --git a/pages/login/LoginPage.dart b/pages/login/LoginPage.dart
index 0eb31c4..dc523af 100644
--- a/pages/login/LoginPage.dart
+++ b/pages/login/LoginPage.dart
@@ -1,4 +1,5 @@
 import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
 import 'package:flutter/cupertino.dart';
 
 class LoginPage extends StatefulWidget {
@@ -10,13 +11,18 @@ class LoginPage extends StatefulWidget {
 
 class _LoginPageState extends State<LoginPage> {
   var _formKey = GlobalKey<FormState>();
+
+	String _phone, _password;
+
   bool passwordVisible = true;
+	bool _autoValidate = false;
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
       body: Form(
         key: _formKey,
+				autovalidate: _autoValidate,
         child: Stack(
           fit: StackFit.expand,
           children: <Widget>[
@@ -28,8 +34,8 @@ class _LoginPageState extends State<LoginPage> {
                       mainAxisAlignment: MainAxisAlignment.center,
                       children: <Widget>[
                         appName('SmartPay'),
-                        textFormField(Icons.person, 'Phone Number', TextInputType.number),
-                        textFormField(Icons.lock, 'Password', TextInputType.text),
+                        textFormField(Icons.person, 'Phone Number', TextInputType.number, _phone),
+                        textFormField(Icons.lock, 'Password', TextInputType.text, _password),
                         Row(
                           mainAxisAlignment: MainAxisAlignment.spaceBetween,
                           children: <Widget>[
@@ -65,11 +71,15 @@ class _LoginPageState extends State<LoginPage> {
   );
 
 
-  Widget textFormField(icnText, hntText, keyType) => Padding(
+  Widget textFormField(icnText, hntText, keyType, txtField) => Padding(
     padding: const EdgeInsets.only(left: 20, right: 20, top: 15,),
     child: TextFormField(
       keyboardType: keyType,
+			inputFormatters: keyType == TextInputType.number
+				? <TextInputFormatter>[WhitelistingTextInputFormatter.digitsOnly]
+				: null,
       obscureText: hntText == 'Password' ? passwordVisible : false,
+			onSaved: (value) => txtField = value,
       validator: (String value,) => textValidation(hntText, value),
       decoration: InputDecoration(
         hintText: hntText,
@@ -95,7 +105,13 @@ class _LoginPageState extends State<LoginPage> {
       color: Colors.greenAccent,
       child: Text(txtLogin),
       onPressed: () {
-				if (_formKey.currentState.validate()) navigatePage('/dashboard');
+				var form = _formKey.currentState;
+				if (form.validate()) {
+					form.save();
+					navigatePage('/dashboard');
+				} else {
+					setState((){ _autoValidate=true; });
+				}
 			}
     )
   );
diff --git a/pages/register/RegisterPage.dart b/pages/register/RegisterPage.dart
index da060ee..642a360 100644
--- a/pages/register/RegisterPage.dart
+++ b/pages/register/RegisterPage.dart
@@ -1,4 +1,6 @@
+import 'dart:async';
 import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
 import 'package:flutter/cupertino.dart';
 import 'package:intl/intl.dart';
 
@@ -16,7 +18,6 @@ class Register extends StatefulWidget {
 }
 
 class _RegisterState extends State<Register> {
-	final _scaffoldKey = GlobalKey<ScaffoldState>();
   var _formKey = GlobalKey<FormState>();
 
 	User user;
@@ -27,7 +28,15 @@ class _RegisterState extends State<Register> {
 
 	String _name, _email, _phone, _studentId, _password, _pin;
 
-	bool passwordVisible, pinVisible = true;
+	bool passwordVisible, pinVisible;
+	bool _autoValidate = false;
+
+	@override
+  void initState() {
+    super.initState();
+		passwordVisible = true;
+		pinVisible = true;
+	}
 
   @override
   Widget build(BuildContext context) {
@@ -42,7 +51,6 @@ class _RegisterState extends State<Register> {
 		return WillPopScope(
 			onWillPop: () { navigatePreviousPage(); },
 			child: Scaffold(
-				key: _scaffoldKey,
 				appBar: AppBar(
 					title: Text('SmartPay'),
 					backgroundColor: Colors.green[900],
@@ -52,6 +60,7 @@ class _RegisterState extends State<Register> {
 				),
 				body: Form(
 					key: _formKey,
+					autovalidate: _autoValidate,
 					child: Stack(
 						fit: StackFit.expand,
 						children: <Widget>[
@@ -63,12 +72,12 @@ class _RegisterState extends State<Register> {
 												mainAxisAlignment: MainAxisAlignment.center,
 												children: <Widget>[
 													textPage('Create a New Profile'),
-													textFormField(Icons.person, 'Name', 'Enter Full Name', TextInputType.text),
-													textFormField(Icons.email, 'Email', 'Enter Email Address', TextInputType.emailAddress),
-													textFormField(Icons. phone_android, 'Phone Number', 'Enter Phone Number', TextInputType.number),
-													textFormField(Icons.perm_identity, 'School ID', 'Enter School ID Number', TextInputType.number),
-													textFormField(Icons.lock, 'Password', 'Enter a Password', TextInputType.text),
-													textFormField(Icons.vpn_key, 'Pin', 'Enter a Pin for payment', TextInputType.number),
+													textFormField(Icons.person, 'Name', 'Enter Full Name', TextInputType.text, false),
+													textFormField(Icons.email, 'Email', 'Enter Email Address', TextInputType.emailAddress, false),
+													textFormField(Icons. phone_android, 'Phone Number', 'Enter Phone Number', TextInputType.number, false),
+													textFormField(Icons.perm_identity, 'School ID', 'Enter School ID Number', TextInputType.number, false),
+													textFormField(Icons.lock, 'Password', 'Enter a Password', TextInputType.text, passwordVisible),
+													textFormField(Icons.vpn_key, 'Pin', 'Enter a Pin for payment', TextInputType.number, pinVisible),
 													signupButton('Sign Up'),
 												],
 											),
@@ -88,17 +97,21 @@ class _RegisterState extends State<Register> {
     child: Text(lblText, style: TextStyle(fontSize: 18),)
   );
 
-  Widget textFormField(icnText, lblText, hntText, keyType) => Padding(
+  Widget textFormField(icnText, lblText, hntText, keyType, blnObscure) => Padding(
     padding: const EdgeInsets.only(top: 10, bottom: 8),
     child: TextFormField(
       keyboardType: keyType,
-			obscureText: _obscureText(lblText),
+			inputFormatters: keyType == TextInputType.number
+				? <TextInputFormatter>[WhitelistingTextInputFormatter.digitsOnly]
+				: null,
+			obscureText: blnObscure,
       onSaved: (value) => updateTextFormField(lblText, value),
       validator: (String value) => textValidation(lblText, value),
       decoration: InputDecoration(
 				labelText: lblText,
 				hintText: hntText,
 				prefixIcon: Icon(icnText, color: Colors.grey),
+				suffixIcon: _suffixIcon(lblText, blnObscure),
       ),
     ),
   );
@@ -117,47 +130,33 @@ class _RegisterState extends State<Register> {
   // Functions
 	void _submit() {
 		final form = _formKey.currentState;
-		if (form.validate()) { form.save(); _save(); }
-	}
-
-  bool _obscureText(lblText) {
-		switch (lblText) {
-			case 'Password':
-				return true;
-				break;
-			case 'Pin':
-				return true;
-				break;
+		if (form.validate()) {
+			form.save();
+			_save();
+		} else {
+			setState((){ _autoValidate=true; });
 		}
-		return false;
 	}
 
-	_suffixIcon(lblText) {
-		var sfxIcon;
-		switch (lblText) {
-			case 'Password':
-				sfxIcon = IconButton(
-					icon: Icon(passwordVisible ? Icons.visibility : Icons.visibility_off),
-					onPressed: () => setState(() { passwordVisible = !passwordVisible; })
-				);
-				break;
-			case 'Pin':
-				sfxIcon = IconButton(
-					icon: Icon(pinVisible ? Icons.visibility : Icons.visibility_off),
-					onPressed: () => setState(() { pinVisible = !pinVisible; })
-				);
-				break;
-			default:
-				sfxIcon = Icon(Icons.widgets, color: Colors.white);
+	_suffixIcon(lblText, blnObscure) {
+		if (lblText == 'Password' || lblText == 'Pin') {
+			return IconButton(
+				icon: Icon(blnObscure ? Icons.visibility : Icons.visibility_off),
+				onPressed: () {
+					lblText == 'Password'
+						? setState(() { passwordVisible = !passwordVisible; })
+						: setState(() { pinVisible = !pinVisible; });
+				}
+			);
 		}
-		return sfxIcon;
+		return Icon(Icons.visibility_off, color: Colors.white);
 	}
 
   textValidation(lblText, value) {
 		if (value.isEmpty) {
 			return '$lblText should not be empty';
 		} else {
-			switch (lblText){
+			switch (lblText) {
 				case 'Name':
 					return !value.contains(' ') ? 'Invalid Full Name' : null;
 					break;
